// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  name          String?   @unique
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  builds        Build[]   @relation("User Builds")
  reviews       Review[]
  favorites     Build[]   @relation("User Favorites")
  socials       Social[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Social {
  id       String          @id @default(cuid())
  userId   String
  user     User            @relation(fields: [userId], references: [id])
  platform SocialPlatforms
  username String
}

enum SocialPlatforms {
  TWITCH
  YOUTUBE
  TWITTER
  INSTAGRAM
  TIKTOK
  DISCORD
}

model Build {
  id            String       @id @default(cuid())
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  authorId      String
  author        User         @relation("User Builds", fields: [authorId], references: [id])
  title         String
  description   String?
  weapon        Weapon       @relation(fields: [weaponId], references: [id])
  weaponId      Int
  attachments   Attachment[]
  reviews       Review[]
  favorites     User[]       @relation("User Favorites")
  averageRating Float        @default(0)
  totalReviews  Int          @default(0)
}

model Weapon {
  id         Int            @id @default(autoincrement())
  name       String
  category   WeaponCategory
  unlock_req String?        @default("")
  builds     Build[]
}

enum WeaponCategory {
  ASSAULT
  BATTLE
  MARKSMAN
  LMG
  SMG
  SHOTGUN
  SNIPER
  HANDGUN
  LAUNCHER
  MELEE
}

model Attachment {
  id         Int                @id @default(autoincrement())
  name       String
  category   AttachmentCategory
  unlock_req String?            @default("")
  builds     Build[]
}

enum AttachmentCategory {
  BARREL
  MAGAZINE
  STOCK
  REARGRIP
  MUZZLE
  UNDERBARREL
  AMMUNITION
  LASER
  OPTIC
  COMB
  BOLT
  GUARD
  TRIGGER
}

model Review {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
  buildId   String
  build     Build    @relation(fields: [buildId], references: [id])
  rating    Int
  content   String?

  @@unique([authorId, buildId])
}
