// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  createdAt     DateTime      @default(now())
  name          String        @unique
  displayName   String        @default("Anonymous")
  email         String        @unique
  emailVerified DateTime?
  image         String
  isVerified    Boolean       @default(false)
  role          Role          @default(USER)
  score         Int           @default(0)
  accounts      Account[]
  sessions      Session[]
  builds        Build[]       @relation("User Builds")
  reviews       Review[]
  favorites     Build[]       @relation("User Favorites")
  views         Build[]       @relation("User Views")
  socials       Socials?
  likedReviews  Review[]      @relation("Review Likes")
  replies       Reply[]
  likedReplies  Reply[]       @relation("Reply Likes")
  scoreLog      ScoreLog[]
  ban           BannedUser?
  activityLogs  ActivityLog[] @relation("User Activity Logs")
  modLogs       ActivityLog[] @relation("Mod Activity Logs")
}

enum Role {
  ADMIN
  MODERATOR
  USER
  CREATOR
}

model BannedUser {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  reason    String
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ScoreLog {
  id     String    @id @default(cuid())
  userId String
  user   User      @relation(fields: [userId], references: [id])
  score  Int
  name   ScoreName
}

enum ScoreName {
  POSTED_BUILD
  POSTED_REVIEW
  POSTED_REPLY
  RECEIVED_BUILD_LIKE
  RECEIVED_BUILD_FAVORITE
}

model Socials {
  id        String @id @default(cuid())
  userId    String @unique
  user      User   @relation(fields: [userId], references: [id])
  twitch    String @default("")
  youtube   String @default("")
  twitter   String @default("")
  instagram String @default("")
  tiktok    String @default("")
  discord   String @default("")
}

model Build {
  id               String            @id @default(cuid())
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  authorId         String
  author           User              @relation("User Builds", fields: [authorId], references: [id])
  title            String
  description      String?
  weapon           Weapon            @relation(fields: [weaponId], references: [id])
  weaponId         Int
  attachmentSetups AttachmentSetup[]
  reviews          Review[]
  favorites        User[]            @relation("User Favorites")
  views            User[]            @relation("User Views")
  averageRating    Float             @default(0)
  totalLikes       Int               @default(0)
  totalDislikes    Int               @default(0)
  totalRatings     Int               @default(0)
  totalReviews     Int               @default(0)
  status           BuildStatus       @default(APPROVED)
  activityLogs     ActivityLog[]
}

enum BuildStatus {
  PENDING
  APPROVED
  REJECTED
}

enum BuildTag {
  LONG_RANGE
  MID_RANGE
  SHORT_RANGE
}

model AttachmentSetup {
  id           String     @id @default(cuid())
  buildId      String
  build        Build      @relation(fields: [buildId], references: [id])
  attachmentId Int
  attachment   Attachment @relation(fields: [attachmentId], references: [id])
  horizontal   String
  vertical     String
}

model Weapon {
  id         Int            @id @default(autoincrement())
  name       String
  category   WeaponCategory
  unlock_req String?        @default("")
  builds     Build[]
}

enum WeaponCategory {
  ASSAULT
  BATTLE
  MARKSMAN
  LMG
  SMG
  SHOTGUN
  SNIPER
  HANDGUN
  LAUNCHER
  MELEE
}

model Attachment {
  id               Int                @id @default(autoincrement())
  name             String
  category         AttachmentCategory
  unlock_req       String?            @default("")
  attachmentSetups AttachmentSetup[]
}

enum AttachmentCategory {
  BARREL
  MAGAZINE
  STOCK
  REARGRIP
  MUZZLE
  UNDERBARREL
  AMMUNITION
  LASER
  OPTIC
  COMB
  BOLT
  GUARD
  TRIGGER
}

model Review {
  id           String        @id @default(cuid())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  authorId     String
  author       User          @relation(fields: [authorId], references: [id])
  buildId      String
  build        Build         @relation(fields: [buildId], references: [id])
  isLike       Boolean?
  content      String?
  likes        User[]        @relation("Review Likes")
  activityLogs ActivityLog[]
  replies      Reply[]
  deletedAt    DateTime?

  @@unique([authorId, buildId])
}

model Reply {
  id           String        @id @default(cuid())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  authorId     String
  author       User          @relation(fields: [authorId], references: [id])
  reviewId     String
  review       Review        @relation(fields: [reviewId], references: [id])
  replyId      String?
  reply        Reply?        @relation("Reply Replies", fields: [replyId], references: [id])
  replies      Reply[]       @relation("Reply Replies")
  content      String
  likes        User[]        @relation("Reply Likes")
  deletedAt    DateTime?
  activityLogs ActivityLog[]
}

enum ActivityType {
  APPROVED_BUILD
  REJECTED_BUILD
  DELETED_BUILD
  BANNED_USER
  UNBANNED_USER
  VERIFIED_USER
  UNVERIFIED_USER
  DELETED_REVIEW
  DELETED_REPLY
}

model ActivityLog {
  id        String       @id @default(cuid())
  createdAt DateTime     @default(now())
  type      ActivityType
  modId     String?
  mod       User?        @relation("Mod Activity Logs", fields: [modId], references: [id])
  userId    String?
  user      User?        @relation("User Activity Logs", fields: [userId], references: [id])
  buildId   String?
  build     Build?       @relation(fields: [buildId], references: [id])
  reviewId  String?
  review    Review?      @relation(fields: [reviewId], references: [id])
  replyId   String?
  reply     Reply?       @relation(fields: [replyId], references: [id])
  notes     String?
}
